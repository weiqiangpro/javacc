/* Generated By:JJTree&JavaCC: Do not edit this line. MyGrammarConstants.java */
package javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 8;
  /** RegularExpression Id. */
  int HEX_LITERAL = 9;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 10;
  /** RegularExpression Id. */
  int INT = 11;
  /** RegularExpression Id. */
  int MAIN = 12;
  /** RegularExpression Id. */
  int FLOAT = 13;
  /** RegularExpression Id. */
  int DOUBLE = 14;
  /** RegularExpression Id. */
  int CHAR = 15;
  /** RegularExpression Id. */
  int BOOL = 16;
  /** RegularExpression Id. */
  int VOID = 17;
  /** RegularExpression Id. */
  int IF = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int ELSEIF = 20;
  /** RegularExpression Id. */
  int WHILE = 21;
  /** RegularExpression Id. */
  int FOR = 22;
  /** RegularExpression Id. */
  int DO = 23;
  /** RegularExpression Id. */
  int TRUE = 24;
  /** RegularExpression Id. */
  int FALSE = 25;
  /** RegularExpression Id. */
  int RETURN = 26;
  /** RegularExpression Id. */
  int BREAK = 27;
  /** RegularExpression Id. */
  int DEFAULTT = 28;
  /** RegularExpression Id. */
  int SWITCH = 29;
  /** RegularExpression Id. */
  int CASE = 30;
  /** RegularExpression Id. */
  int SEMI = 31;
  /** RegularExpression Id. */
  int COM = 32;
  /** RegularExpression Id. */
  int COLON = 33;
  /** RegularExpression Id. */
  int EXC = 34;
  /** RegularExpression Id. */
  int BBRACL = 35;
  /** RegularExpression Id. */
  int BBRACR = 36;
  /** RegularExpression Id. */
  int MBRACL = 37;
  /** RegularExpression Id. */
  int MBRACR = 38;
  /** RegularExpression Id. */
  int SBRACL = 39;
  /** RegularExpression Id. */
  int SBRACR = 40;
  /** RegularExpression Id. */
  int ADD = 41;
  /** RegularExpression Id. */
  int ADDADD = 42;
  /** RegularExpression Id. */
  int SUB = 43;
  /** RegularExpression Id. */
  int SUBSUB = 44;
  /** RegularExpression Id. */
  int MUL = 45;
  /** RegularExpression Id. */
  int PER = 46;
  /** RegularExpression Id. */
  int DIV = 47;
  /** RegularExpression Id. */
  int LES = 48;
  /** RegularExpression Id. */
  int GRE = 49;
  /** RegularExpression Id. */
  int ADDEQU = 50;
  /** RegularExpression Id. */
  int SUBEQU = 51;
  /** RegularExpression Id. */
  int MULEQU = 52;
  /** RegularExpression Id. */
  int PEREQU = 53;
  /** RegularExpression Id. */
  int EQU = 54;
  /** RegularExpression Id. */
  int EQUEQU = 55;
  /** RegularExpression Id. */
  int GREEQU = 56;
  /** RegularExpression Id. */
  int LESEQU = 57;
  /** RegularExpression Id. */
  int NOEQU = 58;
  /** RegularExpression Id. */
  int OR = 59;
  /** RegularExpression Id. */
  int AND = 60;
  /** RegularExpression Id. */
  int IDENTIFIER = 61;
  /** RegularExpression Id. */
  int LETTER = 62;
  /** RegularExpression Id. */
  int DIGIT = 63;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "\"int\"",
    "\"main\"",
    "\"float\"",
    "\"double\"",
    "\"char\"",
    "\"bool\"",
    "\"void\"",
    "\"if\"",
    "\"else\"",
    "\"else if\"",
    "\"while\"",
    "\"for\"",
    "\"do\"",
    "\"true\"",
    "\"false\"",
    "\"return\"",
    "\"break\"",
    "\"default\"",
    "\"switch\"",
    "\"case\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\"!\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"++\"",
    "\"-\"",
    "\"--\"",
    "\"*\"",
    "\"%\"",
    "\"/\"",
    "\"<\"",
    "\">\"",
    "\"+=\"",
    "\"-=\"",
    "\"/=\"",
    "\"%=\"",
    "\"=\"",
    "\"==\"",
    "\">=\"",
    "\"<=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"*=\"",
  };

}
