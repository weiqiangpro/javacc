/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(MyGrammar)
package javacc;
import java.io.FileInputStream;
import util.*;

public class MyGrammar
{
  public SwitchTable switchTable = new SwitchTable();
  public  FunTable tableList = new FunTable();
  public Table tables = new Table();
  public QTList qtList = new QTList();
  public static void main(String args []) throws Exception{
  FileInputStream fis = new FileInputStream("file.txt");
  MyGrammar parser = new MyGrammar(fis);
    try{
      SimpleNode n = parser.Start();
     String str = n.dump();
    System.out.println(str);
      System.out.println("Thank you.");
       parser.qtList.printQTTable();
   		parser.tableList.print();
    }
    catch (RuntimeException e){
      e.printStackTrace();
    }
   }
}

PARSER_END(MyGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
    >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}
TOKEN : /* KEYWORDS */
{
  < INT : "int"  >
| < MAIN : "main" >
| < FLOAT : "float" >
| < DOUBLE : "double">
| < CHAR : "char">
| < BOOL : "bool">
| < VOID : "void" >
| < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < FOR : "for" >
| < DO : "do">
| < TRUE : "true">
| < FALSE : "false">
| < RETURN : "return" >
| < BREAK : "break" >
| < DEFAULTT : "default" >
| < SWITCH : "switch" >
| < CASE : "case" >
}

 TOKEN : /* SEPARATER */
{
  < SEMI : ";" >
| < COM : "," >
| < COLON : ":" >
| < EXC : "!" >
| < BBRACL : "{" >
| < BBRACR : "}" >
| < MBRACL : "[" >
| < MBRACR : "]" >
| < SBRACL : "(" >
| < SBRACR : ")" >
}

TOKEN : /* OPERATOR */
{
  < ADD : "+" >
| < ADDADD : "++" >
| < SUB : "-" >
| < SUBSUB : "--" >
| < MUL : "*" >
| < PER : "%" >
| < DIV : "/" >
| < LES : "<" >
| < GRE : ">" >
| < ADDEQU : "+=" >
| < SUBEQU : "-=" >
| < MULEQU : "/=" >
| < PEREQU : "%=" >
| < EQU : "=" >
| < EQUEQU : "==" >
| < GREEQU : ">=" >
| < LESEQU : "<=" >
| < NOEQU : "!=" >
| < OR : "||" >
| < AND : "&&" >
}   
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

SimpleNode Start() :
{}
{
   program()
  {
    return jjtThis;
  }
}
//程序入口
void program() :
{
  String type;
}
{ 
    (
      LOOKAHEAD(2) 
      functionstatement()
    
     )*
  type =StartType() 
  < MAIN >
  < SBRACL >
  < SBRACR >
  statement()
  {
 	  if(tables.tokens.size() >0)
 	  	  tables.name= "main";
 	  tables.type=type;
 	  tableList.add(tables);
 	  tables =new Table();
 	}
}
String StartType():
{
Token type;
}
{
 (   type=  < INT >
   |type=  < VOID >)
   {
       return type.image;
   }
}
String  FunType():
{
Token type;
}
{
  (      type= < INT >
    | type=< FLOAT >
    | type= < BOOL >
    | type= < CHAR >
    | type=< DOUBLE >
    | type= < VOID >)
    {
      return type.image;
    }
}
//函数声明
void functionstatement(): 
{
String type;
String name;
int num;
  Variable v = new Variable();
}
{
  type = FunType()
  name = Identifier(v) 
  "("num = parameterstatement() ")"
  statement()
     {
 	  if(tables.tokens.size() >0)
 	  tables.name= name;
 	  tables.type=type;
 	  tables.num=num;
 	  tables.line=v.line;
 	  tables.col=v.col;
 	  tableList.add(tables);
 	  tables =new Table();
 	}
}
//函数声明的参数
int parameterstatement():
{
  Variable v = new Variable();
 int num=0;
 String type;
 String image;
 }
{
  (
    type = type()
    image = Identifier(v)
    (",")?
  {
    num++;
    v.image = image;
    v.type = type;
    tables.add(v);
    }
    )*
 {
    return num;
 }
}
//调用的函数
void function(): 
{
  String fun;
  int num;
  Variable v = new Variable();
}
{
  fun = Identifier(v)
  {
    
  }
  "(" num = parameter() ")" ";"
  {
    v.image = fun;
    tableList.con(v,num);
  }
}
//调用函数的参数
int parameter():
{
 int num=0;
 Variable v = new Variable();
 String image;
}
{
  (
    (image = Identifier(v)
     |image = Integer(v)
    )
    (",")?
  {
    num++; v.image = image;
    tables.con(v);
     v = new Variable();
    }
    )*
  {
   return num;
  }
}
//代码块
void statement():
{}
{
  statementBlock()
  | ("{"  (statement())*"}")
}
//if while 顺序语句
void statementBlock():
{}
{ 
   ifStatement()
  |SequencestateStatement()
  |whileStatement()
  |SwitchStatement()
  |ForStatement()
}
//顺序语句
void SequencestateStatement():
{ }
{
 
    (stateStatement() < SEMI >)
  | LOOKAHEAD(2) (calStatement() < SEMI >)
  | LOOKAHEAD(2) function()
  | (assignStatement() < SEMI >)
}
//声明语句
void stateStatement():
{
String type;
}
{
  type = type()
  stateStatementBlok(type)
  (< COM > stateStatementBlok(type))*
  
}
// 代码块
void stateStatementBlok(String type):
{
String e1,e2=null;
 Variable v = new Variable();
}
{
  e1 = Identifier(v)
   [ < EQU >  e2 = Expression()
  {
     QTInfo info = new QTInfo("=", e2, "_", e1);
     qtList.addQTInfo(info);
  }
  ]
  {
    v.type = type;
    v.image = e1;
    tables.add(v);
  }
}
//声明的类型
String  type():
{
  Token t;
}
{
  (      t = < INT >
    | t =< FLOAT >
    | t =< BOOL >
    | t =< CHAR >
    | t = < DOUBLE >)
    {
      return t.image;
    }
}
//赋值
void calStatement():
{
String e1,e2;
Variable v = new Variable();
}
{
 e1 = Identifier(v)
 < EQU >
  e2 =  Expression()  
   {
     QTInfo info = new QTInfo("=", e2, "_", e1);
      qtList.addQTInfo(info);
      v.image=e1;
      tables.con(v);
  }
}
//Swith
void SwitchStatement():
{
  
  String a;
 }
{
  {
  switchTable = new SwitchTable();
  }
  "switch"
  "("  a= Identifier(null) ")"
   "{" CaseStatement(a)  "}" 
}
//case
void CaseStatement(String str):
{
  ConditionValue c = new ConditionValue();
  ConditionValue cbreak = new ConditionValue();
  String s;
  boolean haveBreak = false;
  boolean haveCase = false;
  Variable v = new Variable();
}
{
(
  (
   {
     haveCase = true;
   }     "case" (s = Identifier(v) | s = Integer(v)) ":"
   {
      v.image = s;
      tables.con(v);
      switchTable.add(v);
      v = new Variable();
      QTInfo info1 = new QTInfo("J=", s, str,QTInfo.size+3);
      qtList.addQTInfo(info1);
      QTInfo info2 = new QTInfo("J", "_","_","F");
      qtList.addQTInfo(info2);
      c.mergeFalse(info2);
   }
 	statement()
   ( 
     "break" ";"
   {
     QTInfo info3 = new QTInfo("J", "_", "_","F");
     qtList.addQTInfo(info3);
     cbreak.mergeFalse(info3);
 	 c.backpatchFalseChain(QTInfo.size +1);
     c = new ConditionValue();
    }
    )?
   )
 )*
 	(
      "default" ":"
      (statementBlock())*
      ("break" ";")?
    )?
   {
     if(cbreak!=null)
	 cbreak.backpatchFalseChain(QTInfo.size +1);
   } 
}
//i++ ++i i+=
String assignStatement():
{
Token e1;
String e2;
String op;
 }
{
(    (
    (
      "++" { op = "+";}
    | "--" { op = "-";}
    )
   e1 =  < IDENTIFIER>
   {
      qtList.addQTInfo(new QTInfo(op, e1.image, "1", e1.image));
    }
  )
|
  (
   e1=   < IDENTIFIER>
    (
      (op = AssignRop()
       e2= Expression())
      {
 		qtList.addQTInfo(new QTInfo(op, e1.image, e2, e1.image));
      }
      |(
         "++" { op = "+";}
        |"--" { op = "-";}
       )
        {
          qtList.addQTInfo(new QTInfo(op, e1.image, "1", e1.image));
        }
    )
  )
)
  {
    return e1.image;
  }
}
//符号
String AssignRop():
{
  String op;
}
{
  (
    "=" { op = "=";}
  | "+="{ op = "+";}
  | "-="{ op = "-";}
  | "*="{ op = "*";}
  | "/="{ op = "/";}
  | "%="{ op = "%";}
  )
  {
    return op;
  }
}
//FOR语句
void ForStatement():
{
  ConditionValue c = null;
  String e1;
  int a1=-1,a2=-1;
  int t;
}
{
  "for" "("
  (	
    stateStatement()
  | calStatement()
  )*
  ";"
(
  c = condition()
  )?
  ";"
  
  {
    a2 = QTInfo.size-1;
    a1 =  QTInfo.size+1;
    if(c==null)
    qtList.addQTInfo(new QTInfo("J1", "_", "_", "_"));
    t = QTInfo.size-1;
  }
    (
      [","]
      (
          LOOKAHEAD(3) assignStatement()
        | LOOKAHEAD(3) calStatement() )
    )*
  ")"
  { 
    if(c!=null)
       c.backpatchTrueChain(QTInfo.size+2);
    else {
       a1++;
       a2=a2+2;
       qtList.QTList.get(t).setResult(QTInfo.size+2);
    }
    qtList.addQTInfo(new QTInfo("J2", "_", "_", a2));
  }
  statement()
  {
    if(c!=null) 
      c.backpatchFalseChain(QTInfo.size + 2);
    qtList.addQTInfo(new QTInfo("J3", "_", "_", a1));
  }
}
//if语句
void ifStatement():
{
  ConditionValue c1 = null;
  ConditionValue c2 = null;
  ConditionValue c3 = new ConditionValue();
  int falseNum = -1;
}
{
  < IF>  
  < SBRACL >
 c1 = condition()
   {
    c1.backpatchTrueChain(QTInfo.size + 1);
  }
    < SBRACR >
      statement()
  {
    c1.backpatchFalseChain(QTInfo.size +1);
  }
    (
     LOOKAHEAD(1)            	
	"else"
     statement()
   )?
}
//条件
ConditionValue condition():
{
    ConditionValue c;
}
{
 c= OrBoolExpression()
 {
   return c;
 }
}
//逻辑或
ConditionValue OrBoolExpression():
{
  ConditionValue c1;
  ConditionValue c2;
}
{
  c1 = AndBooleanExpression()
  {
    c2 = c1;
  }
  (
    "||"
    {
     c1.backpatchFalseChain(QTInfo.size+1);
    }
   c2 = AndBooleanExpression()
   { 
      c2.mergeTrue(c1);
      c1 = c2;
   }
  )*
  {
     return c2;
  }
}
//逻辑与
ConditionValue AndBooleanExpression():
{
  ConditionValue c1;
  ConditionValue c2;
}
{
  c1 = NoBooleanExpression()
  {
     c2 = c1;
  }
  (
  "&&"
  {
     c1.backpatchTrueChain(QTInfo.size + 1);
  }
  c2 = NoBooleanExpression()
    {
      c2.mergeFalse(c1);
      c1 = c2;
   }
  )*
   {
     return c2;
  }
}
//逻辑非
ConditionValue  NoBooleanExpression():
{
  ConditionValue c1;
  ConditionValue c2 = new ConditionValue();
  boolean flag = true;
}
{
  ("!"
  { flag = false; }
  )?
  c1 = BoolExpression()
  {
     if (!flag){
      c2.trueChain = c1.falseChain;
      c2.falseChain = c1.trueChain;
      return c2;
    }
    return c1;
  }
}
//判断式
ConditionValue  BoolExpression():
{
 String e1;
  String e2;
   String op;
  ConditionValue c = new ConditionValue();
}
{
 e1 =  Expression()
    
(   (
     "<" { op = "<";}
  |  "<="{ op = "<";}
  |">"{ op = "<";}
  |">="{ op = "<";}
  | "=="{ op = "<";}
  | "!="{ op = "<";}
  ) 	
  
  e2 = Expression()
 {
      QTInfo info1 = new QTInfo("J" + op, e1, e2, "T");
      qtList.addQTInfo(info1);
      c.mergeTrue(info1);
      QTInfo info2 = new QTInfo("J", "_", "_", "F");
      qtList.addQTInfo(info2);
      c.mergeFalse(info2);
      return c;
    }
  )?
  {
      QTInfo info1 = new QTInfo("Jnz", e1,"_", "T");
      qtList.addQTInfo(info1);
      c.mergeTrue(info1);
      QTInfo info2 = new QTInfo("J", "_", "_", "F");
      qtList.addQTInfo(info2);
      c.mergeFalse(info2);
      return c;
    }
}
// while语句
void whileStatement():
{}
{
  WhileStatement1()|WhileStatement2()
}
//While
void WhileStatement1():
{
  ConditionValue chain = null;
  int quad;
}
{
 < WHILE >
 < SBRACL >
 {
    quad = QTInfo.size + 1;
  }
 chain = condition()
 {
   chain.backpatchTrueChain(QTInfo.size + 1);
  }
  < SBRACR >
   statement()
  {
    qtList.addQTInfo(new QTInfo("J", "_", "_", quad));
    chain.backpatchFalseChain(QTInfo.size + 1);
  }
}
//do while
void WhileStatement2():
{
  ConditionValue chain = null;
  int quad;
}
{
  "do"  
 {
    quad = QTInfo.size + 1;
  }
   statement()
 < WHILE >
 < SBRACL >
 chain = condition()
 {
    chain.backpatchFalseChain(QTInfo.size + 1);
    chain.backpatchTrueChain(quad);
  }
  < SBRACR >
}
//表达式
String Expression() :
{
  String exp;
}
{
  exp = AdditiveExpression()
    {
    return exp;
  }
}
String AdditiveExpression() :
{
  String first;
  String middle;
  String newTemp;
  String op;
}
{
   first = MultiplicativeExpression()
  {
    newTemp = first;
  }
  (
    (
	   "+" { op = "+";}
    | "-"{ op = "-";}
    )
   middle = MultiplicativeExpression()
    {
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op, first, middle, newTemp);
      qtList.addQTInfo(qt);
      first = newTemp;
    }
  )*
  {
    return newTemp;
  }
}

String MultiplicativeExpression() :
{
  String first;
  String middle;
  String newTemp;
  String op;
}
{
  first =  UnaryExpression()
   {
    newTemp = first;
   }
  (
    (
      "*"{op = "*";}
    | "/"{op = "/";}
    | "%"{op = "%";}
    )
    middle = UnaryExpression()
     {
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op, first, middle, newTemp);
      qtList.addQTInfo(qt);
      first = newTemp;
    }
  )*
  {
    return newTemp;
  }
}

String UnaryExpression() :
{
	String str = null;
	Token t = null;
	Variable v = new Variable();
}
{
 (
    "(" str = Expression() ")"
    | str =  Identifier(v)
	{
  		v.image = str;
 	 	tables.con(v);
	}
	| str =  Integer(null)
  )
  {
    return str;
  }
}

String Identifier(Variable v) :
{
	Token t;
}
{
 t=  < IDENTIFIER >
 {
   if(v!=null) { 
   	  v.line = t.beginLine;
   v.col = t.beginColumn; }
   return t.image;
 }
}

String  Integer(Variable v) :
{
  Token t;
}
{
 t = < INTEGER_LITERAL >
  {
    if(v!=null) { 
       v.line = t.beginLine;
       v.col = t.beginColumn; }
    return t.image;
  }
}