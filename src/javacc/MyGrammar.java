/* Generated By:JJTree&JavaCC: Do not edit this line. MyGrammar.java */
package javacc;
import java.io.FileInputStream;
import util.*;
public class MyGrammar/*@bgen(jjtree)*/implements MyGrammarTreeConstants, MyGrammarConstants {/*@bgen(jjtree)*/
  protected JJTMyGrammarState jjtree = new JJTMyGrammarState();
   public QTList qtList = new QTList();
  public static void main(String args []) throws Exception{
     FileInputStream fis = new FileInputStream("file.txt");
    MyGrammar parser = new MyGrammar(fis);
    try{
      SimpleNode n = parser.Start();
//     String str = n.dump();
//      System.out.println(str);
//      System.out.println("Thank you.");
       parser.qtList.printQTTable();

    }
    catch (Exception e){
      e.printStackTrace();
    }
   }

  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      program();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

//Á®ãÂ∫èÂÖ•Âè£
  final public void program() throws ParseException {
 /*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        functionstatement();
      }
      StartType();
      jj_consume_token(MAIN);
      jj_consume_token(SBRACL);
      jj_consume_token(SBRACR);
      statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void StartType() throws ParseException {
 /*@bgen(jjtree) StartType */
  SimpleNode jjtn000 = new SimpleNode(JJTSTARTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunType() throws ParseException {
 /*@bgen(jjtree) FunType */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case BOOL:
        jj_consume_token(BOOL);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//ÂáΩÊï∞Â£∞Êòé
  final public void functionstatement() throws ParseException {
 /*@bgen(jjtree) functionstatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunType();
      Identifier();
      jj_consume_token(SBRACL);
      parameterstatement();
      jj_consume_token(SBRACR);
      statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//ÂáΩÊï∞Â£∞ÊòéÁöÑÂèÇÊï?
  final public void parameterstatement() throws ParseException {
 /*@bgen(jjtree) parameterstatement */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case FLOAT:
        case DOUBLE:
        case CHAR:
        case BOOL:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        type();
        Identifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COM:
          jj_consume_token(COM);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Ë∞ÉÁî®ÁöÑÂáΩÊï?
  final public void function() throws ParseException {
 /*@bgen(jjtree) function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(SBRACL);
      parameter();
      jj_consume_token(SBRACR);
      jj_consume_token(SEMI);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Ë∞ÉÁî®ÂáΩÊï∞ÁöÑÂèÇÊï?
  final public void parameter() throws ParseException {
 /*@bgen(jjtree) parameter */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Identifier();
          break;
        case INTEGER_LITERAL:
          Integer();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COM:
          jj_consume_token(COM);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//‰ª£Á†ÅÂù?
  final public void statement() throws ParseException {
 /*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case DOUBLE:
      case CHAR:
      case BOOL:
      case IF:
      case WHILE:
      case FOR:
      case DO:
      case SWITCH:
      case ADDADD:
      case SUBSUB:
      case IDENTIFIER:
        statementBlock();
        break;
      case BBRACL:
        jj_consume_token(BBRACL);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case FLOAT:
          case DOUBLE:
          case CHAR:
          case BOOL:
          case IF:
          case WHILE:
          case FOR:
          case DO:
          case SWITCH:
          case BBRACL:
          case ADDADD:
          case SUBSUB:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_4;
          }
          statement();
        }
        jj_consume_token(BBRACR);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//if while È°∫Â∫èËØ≠Âè•
  final public void statementBlock() throws ParseException {
 /*@bgen(jjtree) statementBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        ifStatement();
        break;
      case INT:
      case FLOAT:
      case DOUBLE:
      case CHAR:
      case BOOL:
      case ADDADD:
      case SUBSUB:
      case IDENTIFIER:
        SequencestateStatement();
        break;
      case WHILE:
      case DO:
        whileStatement();
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case FOR:
        ForStatement();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//È°∫Â∫èËØ≠Âè•
  final public void SequencestateStatement() throws ParseException {
 /*@bgen(jjtree) SequencestateStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQUENCESTATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case DOUBLE:
      case CHAR:
      case BOOL:
        stateStatement();
        jj_consume_token(SEMI);
        break;
      default:
        jj_la1[10] = jj_gen;
        if (jj_2_2(2)) {
          calStatement();
          jj_consume_token(SEMI);
        } else if (jj_2_3(2)) {
          function();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ADDADD:
          case SUBSUB:
          case IDENTIFIER:
            assignStatement();
            jj_consume_token(SEMI);
            break;
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Â£∞ÊòéËØ≠Âè•
  final public void stateStatement() throws ParseException {
 /*@bgen(jjtree) stateStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      stateStatementBlok();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COM:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
        jj_consume_token(COM);
        stateStatementBlok();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// ‰ª£Á†ÅÂù?
  final public void stateStatementBlok() throws ParseException {
 /*@bgen(jjtree) stateStatementBlok */
SimpleNode jjtn000 = new SimpleNode(JJTSTATESTATEMENTBLOK);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String e1,e2;
    try {
      e1 = Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQU:
        jj_consume_token(EQU);
        e2 = Expression();
     QTInfo info = new QTInfo("=", e2, "_", e1);
      qtList.addQTInfo(info);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Â£∞ÊòéÁöÑÁ±ªÂû?
  final public void type() throws ParseException {
 /*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case BOOL:
        jj_consume_token(BOOL);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//ËµãÂ??
  final public void calStatement() throws ParseException {
 /*@bgen(jjtree) calStatement */
SimpleNode jjtn000 = new SimpleNode(JJTCALSTATEMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String e1,e2;
    try {
      e1 = Identifier();
      jj_consume_token(EQU);
      e2 = Expression();
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     QTInfo info = new QTInfo("=", e2, "_", e1);
      qtList.addQTInfo(info);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

//Swith
  final public void SwitchStatement() throws ParseException {
 /*@bgen(jjtree) SwitchStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(SBRACL);
      Identifier();
      jj_consume_token(SBRACR);
      jj_consume_token(BBRACL);
      CaseStatement();
      jj_consume_token(BBRACR);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//case
  final public void CaseStatement() throws ParseException {
 /*@bgen(jjtree) CaseStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        jj_consume_token(CASE);
        Identifier();
        jj_consume_token(COLON);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case FLOAT:
          case DOUBLE:
          case CHAR:
          case BOOL:
          case IF:
          case WHILE:
          case FOR:
          case DO:
          case SWITCH:
          case ADDADD:
          case SUBSUB:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_7;
          }
          statementBlock();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
          jj_consume_token(BREAK);
          jj_consume_token(SEMI);
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULTT:
        jj_consume_token(DEFAULTT);
        jj_consume_token(COLON);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case FLOAT:
          case DOUBLE:
          case CHAR:
          case BOOL:
          case IF:
          case WHILE:
          case FOR:
          case DO:
          case SWITCH:
          case ADDADD:
          case SUBSUB:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_8;
          }
          statementBlock();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
          jj_consume_token(BREAK);
          jj_consume_token(SEMI);
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

//i++ ++i i+=
  final public void assignStatement() throws ParseException {
 /*@bgen(jjtree) assignStatement */
SimpleNode jjtn000 = new SimpleNode(JJTASSIGNSTATEMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token e1;
String e2;
String op;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDADD:
      case SUBSUB:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDADD:
          jj_consume_token(ADDADD);
             op = "+";
          break;
        case SUBSUB:
          jj_consume_token(SUBSUB);
             op = "-";
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        e1 = jj_consume_token(IDENTIFIER);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
      qtList.addQTInfo(new QTInfo(op, e1.image, "1", e1.image));
        break;
      case IDENTIFIER:
        e1 = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDEQU:
        case SUBEQU:
        case MULEQU:
        case PEREQU:
        case EQU:
        case 64:
          op = AssignRop();
          e2 = Expression();
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
                qtList.addQTInfo(new QTInfo(op, e1.image, e2, e1.image));
          break;
        case ADDADD:
        case SUBSUB:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ADDADD:
            jj_consume_token(ADDADD);
                op = "+";
            break;
          case SUBSUB:
            jj_consume_token(SUBSUB);
                op = "-";
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          qtList.addQTInfo(new QTInfo(op, e1.image, "1", e1.image));
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Á¨¶Âè∑
  final public String AssignRop() throws ParseException {
 /*@bgen(jjtree) AssignRop */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNROP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String op;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQU:
        jj_consume_token(EQU);
          op = "=";
        break;
      case ADDEQU:
        jj_consume_token(ADDEQU);
          op = "+";
        break;
      case SUBEQU:
        jj_consume_token(SUBEQU);
          op = "-";
        break;
      case 64:
        jj_consume_token(64);
          op = "*";
        break;
      case MULEQU:
        jj_consume_token(MULEQU);
          op = "/";
        break;
      case PEREQU:
        jj_consume_token(PEREQU);
          op = "%";
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return op;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//FORËØ≠Âè•
  final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(SBRACL);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case FLOAT:
        case DOUBLE:
        case CHAR:
        case BOOL:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case FLOAT:
        case DOUBLE:
        case CHAR:
        case BOOL:
          stateStatement();
          break;
        case IDENTIFIER:
          calStatement();
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(SEMI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case EXC:
      case SBRACL:
      case IDENTIFIER:
        condition();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      jj_consume_token(SEMI);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COM:
        case ADDADD:
        case SUBSUB:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COM:
          jj_consume_token(COM);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        assignStatement();
      }
      jj_consume_token(SBRACR);
      statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//ifËØ≠Âè•
  final public void ifStatement() throws ParseException {
 /*@bgen(jjtree) ifStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue c1 = null;
  ConditionValue c2 = null;
  ConditionValue c3 = new ConditionValue();
  int falseNum = -1;
    try {
      jj_consume_token(IF);
      jj_consume_token(SBRACL);
      c1 = condition();
    c1.backpatchTrueChain(QTInfo.size + 1);
      jj_consume_token(SBRACR);
      statement();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEIF:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_11;
        }
      QTInfo info = new QTInfo("J", "_", "_", "T");
      qtList.addQTInfo(info);
      c3.mergeTrue(info);
        jj_consume_token(ELSEIF);
        jj_consume_token(SBRACL);
          c1.backpatchFalseChain(QTInfo.size + 1);
        c2 = condition();
    c2.backpatchTrueChain(QTInfo.size + 1);
    c1 = c2;
        jj_consume_token(SBRACR);
        statement();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
      QTInfo info = new QTInfo("J", "_", "_", "T");
      qtList.addQTInfo(info);
      c3.mergeTrue(info);
        jj_consume_token(ELSE);
  c1.backpatchFalseChain(QTInfo.size + 1);
        statement();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
       if(c3.trueChain.size()!=0)
       c3.backpatchTrueChain(QTInfo.size + 1);
       else
         c1.backpatchFalseChain(QTInfo.size + 1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Êù°‰ª∂
  final public ConditionValue condition() throws ParseException {
 /*@bgen(jjtree) condition */
    SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);ConditionValue c;
    try {
      c = OrBoolExpression();
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   {if (true) return c;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

//ÈÄªËæëÊà?
  final public ConditionValue OrBoolExpression() throws ParseException {
 /*@bgen(jjtree) OrBoolExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTORBOOLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue c1;
  ConditionValue c2;
    try {
      c1 = AndBooleanExpression();
    c2 = c1;
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_12;
        }
        jj_consume_token(OR);
        c2 = AndBooleanExpression();
     c1.backpatchFalseChain(QTInfo.size + 1);
      c2.mergeTrue(c1);
      c1 = c2;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
     {if (true) return c2;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//ÈÄªËæë‰∏?
  final public ConditionValue AndBooleanExpression() throws ParseException {
 /*@bgen(jjtree) AndBooleanExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTANDBOOLEANEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue c1;
  ConditionValue c2;
    try {
      c1 = NoBooleanExpression();
     c2 = c1;
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_13;
        }
        jj_consume_token(AND);
        c2 = NoBooleanExpression();
     c1.backpatchTrueChain(QTInfo.size + 1);
      c2.mergeFalse(c1);
      c1 = c2;
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return c2;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//ÈÄªËæëÈù?
  final public ConditionValue NoBooleanExpression() throws ParseException {
 /*@bgen(jjtree) NoBooleanExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNOBOOLEANEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue c1;
  ConditionValue c2 = new ConditionValue();
  boolean flag = true;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXC:
        jj_consume_token(EXC);
         flag = false;
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      c1 = BoolExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
     if (!flag){
      c2.trueChain = c1.falseChain;
      c2.falseChain = c1.trueChain;
      {if (true) return c2;}
    }
    {if (true) return c1;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//Âà§Êñ≠Âº?
  final public ConditionValue BoolExpression() throws ParseException {
 /*@bgen(jjtree) BoolExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOLEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String e1;
  String e2;
   String op;
  ConditionValue c = new ConditionValue();
    try {
      e1 = Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LES:
      case GRE:
      case EQUEQU:
      case GREEQU:
      case LESEQU:
      case NOEQU:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LES:
          jj_consume_token(LES);
           op = "<";
          break;
        case LESEQU:
          jj_consume_token(LESEQU);
           op = "<";
          break;
        case GRE:
          jj_consume_token(GRE);
        op = "<";
          break;
        case GREEQU:
          jj_consume_token(GREEQU);
         op = "<";
          break;
        case EQUEQU:
          jj_consume_token(EQUEQU);
          op = "<";
          break;
        case NOEQU:
          jj_consume_token(NOEQU);
          op = "<";
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        e2 = Expression();
      QTInfo info1 = new QTInfo("J" + op, e1, e2, "T");
      qtList.addQTInfo(info1);
      c.mergeTrue(info1);
       QTInfo info2 = new QTInfo("J", "_", "_", "F");
    qtList.addQTInfo(info2);
    c.mergeFalse(info2);
    {if (true) return c;}
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
      QTInfo info1 = new QTInfo("Jnz", e1,"_", "T");
      qtList.addQTInfo(info1);
      c.mergeTrue(info1);
       QTInfo info2 = new QTInfo("J", "_", "_", "F");
    qtList.addQTInfo(info2);
    c.mergeFalse(info2);
    {if (true) return c;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

// whileËØ≠Âè•
  final public void whileStatement() throws ParseException {
 /*@bgen(jjtree) whileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        WhileStatement1();
        break;
      case DO:
        WhileStatement2();
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//While
  final public void WhileStatement1() throws ParseException {
 /*@bgen(jjtree) WhileStatement1 */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue chain = null;
  int quad;
    try {
      jj_consume_token(WHILE);
      jj_consume_token(SBRACL);
    quad = QTInfo.size + 1;
      chain = condition();
   chain.backpatchTrueChain(QTInfo.size + 1);
      jj_consume_token(SBRACR);
      jj_consume_token(BBRACL);
      statement();
    qtList.addQTInfo(new QTInfo("J", "_", "_", quad));
    chain.backpatchFalseChain(QTInfo.size + 1);
      jj_consume_token(BBRACR);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

//do while
  final public void WhileStatement2() throws ParseException {
 /*@bgen(jjtree) WhileStatement2 */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue chain = null;
  int quad;
    try {
      jj_consume_token(DO);
    quad = QTInfo.size + 1;
      statement();
      jj_consume_token(WHILE);
      jj_consume_token(SBRACL);
      chain = condition();
//    quad
    chain.backpatchFalseChain(QTInfo.size + 1);

   chain.backpatchTrueChain(quad);
      jj_consume_token(SBRACR);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Ë°®ËææÂº?
  final public String Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String exp;
    try {
      exp = AdditiveExpression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    {if (true) return exp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String AdditiveExpression() throws ParseException {
 /*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String first;
  String middle;
  String newTemp;
  String op;
    try {
      first = MultiplicativeExpression();
    newTemp = first;
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case SUB:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
          jj_consume_token(ADD);
                 op = "+";
          break;
        case SUB:
          jj_consume_token(SUB);
           op = "-";
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        middle = MultiplicativeExpression();
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op, first, middle, newTemp);
      qtList.addQTInfo(qt);
      first = newTemp;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return newTemp;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public String MultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String first;
  String middle;
  String newTemp;
  String op;
    try {
      first = UnaryExpression();
    newTemp = first;
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL:
        case PER:
        case DIV:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL:
          jj_consume_token(MUL);
          op = "*";
          break;
        case DIV:
          jj_consume_token(DIV);
          op = "/";
          break;
        case PER:
          jj_consume_token(PER);
          op = "%";
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        middle = UnaryExpression();
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op, first, middle, newTemp);
      qtList.addQTInfo(qt);
      first = newTemp;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return newTemp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String UnaryExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
        SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String str = null;
        Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SBRACL:
        jj_consume_token(SBRACL);
        str = Expression();
        jj_consume_token(SBRACR);
        break;
      case IDENTIFIER:
        str = Identifier();
        break;
      case INTEGER_LITERAL:
        str = Integer();
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
    {if (true) return str;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
        SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   {if (true) return t.image;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Integer() throws ParseException {
 /*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(SBRACL)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(EQU)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MyGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20800,0x3e800,0x1e800,0x0,0x80,0x80,0x0,0x20e5e800,0x20e5e800,0x20e5e800,0x1e800,0x0,0x0,0x0,0x1e800,0x40000000,0x20e5e800,0x8000000,0x20e5e800,0x8000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x1e800,0x1e800,0x80,0x0,0x0,0x100000,0x80000,0x0,0x0,0x0,0x0,0x0,0xa00000,0x0,0x0,0x0,0x0,0x80,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x1,0x20000000,0x20000000,0x1,0x20001408,0x20001408,0x20001400,0x0,0x20001400,0x1,0x400000,0x0,0x0,0x20001400,0x0,0x20001400,0x0,0x0,0x1400,0x1400,0x7c1400,0x20001400,0x7c0000,0x20000000,0x20000000,0x20000084,0x20001401,0x1,0x0,0x0,0x8000000,0x10000000,0x4,0x7830000,0x7830000,0x0,0xa00,0xa00,0xe000,0xe000,0x20000080,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyGrammar(MyGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[65];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 65; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
