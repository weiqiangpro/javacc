/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(MyGrammar)
package javacc;
import java.io.FileInputStream;
import util.*;

public class MyGrammar/*@bgen(jjtree)*/implements MyGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTMyGrammarState jjtree = new JJTMyGrammarState();

/*@egen*/
  public SwitchTable switchTable = new SwitchTable();
  public  FunTable tableList = new FunTable();
  public Table tables = new Table();
  public QTList qtList = new QTList();
  public static void main(String args []) throws Exception{
  FileInputStream fis = new FileInputStream("file.txt");
  MyGrammar parser = new MyGrammar(fis);
    try{
      SimpleNode n = parser.Start();
     String str = n.dump();
    System.out.println(str);
      System.out.println("Thank you.");
       parser.qtList.printQTTable();
   		parser.tableList.print();
    }
    catch (RuntimeException e){
      e.printStackTrace();
    }
   }
}

PARSER_END(MyGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
    >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}
TOKEN : /* KEYWORDS */
{
  < INT : "int"  >
| < MAIN : "main" >
| < FLOAT : "float" >
| < DOUBLE : "double">
| < CHAR : "char">
| < BOOL : "bool">
| < VOID : "void" >
| < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < FOR : "for" >
| < DO : "do">
| < TRUE : "true">
| < FALSE : "false">
| < RETURN : "return" >
| < BREAK : "break" >
| < DEFAULTT : "default" >
| < SWITCH : "switch" >
| < CASE : "case" >
}

 TOKEN : /* SEPARATER */
{
  < SEMI : ";" >
| < COM : "," >
| < COLON : ":" >
| < EXC : "!" >
| < BBRACL : "{" >
| < BBRACR : "}" >
| < MBRACL : "[" >
| < MBRACR : "]" >
| < SBRACL : "(" >
| < SBRACR : ")" >
}

TOKEN : /* OPERATOR */
{
  < ADD : "+" >
| < ADDADD : "++" >
| < SUB : "-" >
| < SUBSUB : "--" >
| < MUL : "*" >
| < PER : "%" >
| < DIV : "/" >
| < LES : "<" >
| < GRE : ">" >
| < ADDEQU : "+=" >
| < SUBEQU : "-=" >
| < MULEQU : "/=" >
| < PEREQU : "%=" >
| < EQU : "=" >
| < EQUEQU : "==" >
| < GREEQU : ">=" >
| < LESEQU : "<=" >
| < NOEQU : "!=" >
| < OR : "||" >
| < AND : "&&" >
}   
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
   try {
/*@egen*/
   program()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
//\u7ecb\u5b2a\u7c2d\u934f\u30e5\u5f5b
void program() :
{/*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String type;
}
{/*@bgen(jjtree) program */
    try {
/*@egen*/ 
    (
      LOOKAHEAD(2) 
      functionstatement()
    
     )*
  type =StartType() 
  < MAIN >
  < SBRACL >
  < SBRACR >
  statement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
 	  if(tables.tokens.size() >0)
 	  	  tables.name= "main";
 	  tables.type=type;
 	  tableList.add(tables);
 	  tables =new Table();
 	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
String StartType():
{/*@bgen(jjtree) StartType */
SimpleNode jjtn000 = new SimpleNode(JJTSTARTTYPE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token type;
}
{/*@bgen(jjtree) StartType */
 try {
/*@egen*/
 (   type=  < INT >
   |type=  < VOID >)/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
       return type.image;
   }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
String  FunType():
{/*@bgen(jjtree) FunType */
SimpleNode jjtn000 = new SimpleNode(JJTFUNTYPE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token type;
}
{/*@bgen(jjtree) FunType */
  try {
/*@egen*/
  (      type= < INT >
    | type=< FLOAT >
    | type= < BOOL >
    | type= < CHAR >
    | type=< DOUBLE >
    | type= < VOID >)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      return type.image;
    }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u9351\u82a5\u669f\u6fb9\u7248\u69d1
void functionstatement(): 
{/*@bgen(jjtree) functionstatement */
SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONSTATEMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
String type;
String name;
int num;
  Variable v = new Variable();
}
{/*@bgen(jjtree) functionstatement */
  try {
/*@egen*/
  type = FunType()
  name = Identifier(v) 
  "("num = parameterstatement() ")"
  statement()/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/
     {
 	  if(tables.tokens.size() >0)
 	  tables.name= name;
 	  tables.type=type;
 	  tables.num=num;
 	  tables.line=v.line;
 	  tables.col=v.col;
 	  tableList.add(tables);
 	  tables =new Table();
 	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u9351\u82a5\u669f\u6fb9\u7248\u69d1\u9428\u52eb\u5f2c\u93c1\ufffd
int parameterstatement():
{/*@bgen(jjtree) parameterstatement */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Variable v = new Variable();
 int num=0;
 String type;
 String image;
 }
{/*@bgen(jjtree) parameterstatement */
  try {
/*@egen*/
  (
    type = type()
    image = Identifier(v)
    (",")?
  {
    num++;
    v.image = image;
    v.type = type;
    tables.add(v);
    }
    )*/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {
    return num;
 }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u748b\u51aa\u6564\u9428\u52eb\u56b1\u93c1\ufffd
void function(): 
{/*@bgen(jjtree) function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String fun;
  int num;
  Variable v = new Variable();
}
{/*@bgen(jjtree) function */
  try {
/*@egen*/
  fun = Identifier(v)
  {
    
  }
  "(" num = parameter() ")" ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    v.image = fun;
    tableList.con(v,num);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u748b\u51aa\u6564\u9351\u82a5\u669f\u9428\u52eb\u5f2c\u93c1\ufffd
int parameter():
{/*@bgen(jjtree) parameter */
 SimpleNode jjtn000 = new SimpleNode(JJTPARAMETER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 int num=0;
 Variable v = new Variable();
 String image;
}
{/*@bgen(jjtree) parameter */
  try {
/*@egen*/
  (
    (image = Identifier(v)
     |image = Integer(v)
    )
    (",")?
  {
    num++; v.image = image;
    tables.con(v);
     v = new Variable();
    }
    )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
   return num;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u6d60\uff47\u721c\u9367\ufffd
void statement():
{/*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statement */
  try {
/*@egen*/
  statementBlock()
  | ("{"  (statement())*"}")/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//if while \u6924\u54c4\u7c2d\u7487\ue15e\u5f5e
void statementBlock():
{/*@bgen(jjtree) statementBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statementBlock */
   try {
/*@egen*/ 
   ifStatement()
  |SequencestateStatement()
  |whileStatement()
  |SwitchStatement()
  |ForStatement()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
//\u6924\u54c4\u7c2d\u7487\ue15e\u5f5e
void SequencestateStatement():
{/*@bgen(jjtree) SequencestateStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQUENCESTATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SequencestateStatement */
    try {
/*@egen*/
 
    (stateStatement() < SEMI >)
  | LOOKAHEAD(2) (calStatement() < SEMI >)
  | LOOKAHEAD(2) function()
  | (assignStatement() < SEMI >)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
//\u6fb9\u7248\u69d1\u7487\ue15e\u5f5e
void stateStatement():
{/*@bgen(jjtree) stateStatement */
SimpleNode jjtn000 = new SimpleNode(JJTSTATESTATEMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
String type;
}
{/*@bgen(jjtree) stateStatement */
  try {
/*@egen*/
  type = type()
  stateStatementBlok(type)
  (< COM > stateStatementBlok(type))*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  
}
// \u6d60\uff47\u721c\u9367\ufffd
void stateStatementBlok(String type):
{/*@bgen(jjtree) stateStatementBlok */
SimpleNode jjtn000 = new SimpleNode(JJTSTATESTATEMENTBLOK);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
String e1,e2=null;
 Variable v = new Variable();
}
{/*@bgen(jjtree) stateStatementBlok */
  try {
/*@egen*/
  e1 = Identifier(v)
   [ < EQU >  e2 = Expression()
  {
     QTInfo info = new QTInfo("=", e2, "_", e1);
     qtList.addQTInfo(info);
  }
  ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    v.type = type;
    v.image = e1;
    tables.add(v);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u6fb9\u7248\u69d1\u9428\u52ed\u88ab\u9368\ufffd
String  type():
{/*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) type */
  try {
/*@egen*/
  (      t = < INT >
    | t =< FLOAT >
    | t =< BOOL >
    | t =< CHAR >
    | t = < DOUBLE >)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      return t.image;
    }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u74a7\u5b2a\ufffd\ufffd
void calStatement():
{/*@bgen(jjtree) calStatement */
SimpleNode jjtn000 = new SimpleNode(JJTCALSTATEMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
String e1,e2;
Variable v = new Variable();
}
{/*@bgen(jjtree) calStatement */
 try {
/*@egen*/
 e1 = Identifier(v)
 < EQU >
  e2 =  Expression()/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/  
   {
     QTInfo info = new QTInfo("=", e2, "_", e1);
      qtList.addQTInfo(info);
      v.image=e1;
      tables.con(v);
  }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
//Swith
void SwitchStatement():
{/*@bgen(jjtree) SwitchStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  
  String a;
 }
{/*@bgen(jjtree) SwitchStatement */
  try {
/*@egen*/
  {
  switchTable = new SwitchTable();
  }
  "switch"
  "("  a= Identifier(null) ")"
   "{" CaseStatement(a)  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}
//case
void CaseStatement(String str):
{/*@bgen(jjtree) CaseStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue c = new ConditionValue();
  ConditionValue cbreak = new ConditionValue();
  String s;
  boolean haveBreak = false;
  boolean haveCase = false;
  Variable v = new Variable();
}
{/*@bgen(jjtree) CaseStatement */
try {
/*@egen*/
(
  (
   {
     haveCase = true;
   }     "case" (s = Identifier(v) | s = Integer(v)) ":"
   {
      v.image = s;
      tables.con(v);
      switchTable.add(v);
      v = new Variable();
      QTInfo info1 = new QTInfo("J=", s, str,QTInfo.size+3);
      qtList.addQTInfo(info1);
      QTInfo info2 = new QTInfo("J", "_","_","F");
      qtList.addQTInfo(info2);
      c.mergeFalse(info2);
   }
 	statement()
   ( 
     "break" ";"
   {
     QTInfo info3 = new QTInfo("J", "_", "_","F");
     qtList.addQTInfo(info3);
     cbreak.mergeFalse(info3);
 	 c.backpatchFalseChain(QTInfo.size +1);
     c = new ConditionValue();
    }
    )?
   )
 )*
 	(
      "default" ":"
      (statementBlock())*
      ("break" ";")?
    )?/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
     if(cbreak!=null)
	 cbreak.backpatchFalseChain(QTInfo.size +1);
   }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/ 
}
//i++ ++i i+=
String assignStatement():
{/*@bgen(jjtree) assignStatement */
SimpleNode jjtn000 = new SimpleNode(JJTASSIGNSTATEMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token e1;
String e2;
String op;
 }
{/*@bgen(jjtree) assignStatement */
try {
/*@egen*/
(    (
    (
      "++" { op = "+";}
    | "--" { op = "-";}
    )
   e1 =  < IDENTIFIER>
   {
      qtList.addQTInfo(new QTInfo(op, e1.image, "1", e1.image));
    }
  )
|
  (
   e1=   < IDENTIFIER>
    (
      (op = AssignRop()
       e2= Expression())
      {
 		qtList.addQTInfo(new QTInfo(op, e1.image, e2, e1.image));
      }
      |(
         "++" { op = "+";}
        |"--" { op = "-";}
       )
        {
          qtList.addQTInfo(new QTInfo(op, e1.image, "1", e1.image));
        }
    )
  )
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return e1.image;
  }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
//\u7ed7\ufe40\u5f7f
String AssignRop():
{/*@bgen(jjtree) AssignRop */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNROP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String op;
}
{/*@bgen(jjtree) AssignRop */
  try {
/*@egen*/
  (
    "=" { op = "=";}
  | "+="{ op = "+";}
  | "-="{ op = "-";}
  | "*="{ op = "*";}
  | "/="{ op = "/";}
  | "%="{ op = "%";}
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return op;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//FOR\u7487\ue15e\u5f5e
void ForStatement():
{/*@bgen(jjtree) ForStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue c = null;
  String e1;
  int a1=-1,a2=-1;
  int t;
}
{/*@bgen(jjtree) ForStatement */
  try {
/*@egen*/
  "for" "("
  (	
    stateStatement()
  | calStatement()
  )*
  ";"
(
  c = condition()
  )?
  ";"
  
  {
    a2 = QTInfo.size-1;
    a1 =  QTInfo.size+1;
    if(c==null)
    qtList.addQTInfo(new QTInfo("J1", "_", "_", "_"));
    t = QTInfo.size-1;
  }
    (
      [","]
      (
          LOOKAHEAD(3) assignStatement()
        | LOOKAHEAD(3) calStatement() )
    )*
  ")"
  { 
    if(c!=null)
       c.backpatchTrueChain(QTInfo.size+2);
    else {
       a1++;
       a2=a2+2;
       qtList.QTList.get(t).setResult(QTInfo.size+2);
    }
    qtList.addQTInfo(new QTInfo("J2", "_", "_", a2));
  }
  statement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(c!=null) 
      c.backpatchFalseChain(QTInfo.size + 2);
    qtList.addQTInfo(new QTInfo("J3", "_", "_", a1));
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//if\u7487\ue15e\u5f5e
void ifStatement():
{/*@bgen(jjtree) ifStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue c1 = null;
  ConditionValue c2 = null;
  ConditionValue c3 = new ConditionValue();
  int falseNum = -1;
}
{/*@bgen(jjtree) ifStatement */
  try {
/*@egen*/
  < IF>  
  < SBRACL >
 c1 = condition()
   {
    c1.backpatchTrueChain(QTInfo.size + 1);
  }
    < SBRACR >
      statement()
  {
    c1.backpatchFalseChain(QTInfo.size +1);
  }
    (
     LOOKAHEAD(1)            	
	"else"
     statement()
   )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u93c9\u2032\u6b22
ConditionValue condition():
{/*@bgen(jjtree) condition */
    SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ConditionValue c;
}
{/*@bgen(jjtree) condition */
 try {
/*@egen*/
 c= OrBoolExpression()/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {
   return c;
 }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
//\u95ab\u660f\u7deb\u93b4\ufffd
ConditionValue OrBoolExpression():
{/*@bgen(jjtree) OrBoolExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTORBOOLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue c1;
  ConditionValue c2;
}
{/*@bgen(jjtree) OrBoolExpression */
  try {
/*@egen*/
  c1 = AndBooleanExpression()
  {
    c2 = c1;
  }
  (
    "||"
    {
     c1.backpatchFalseChain(QTInfo.size+1);
    }
   c2 = AndBooleanExpression()
   { 
      c2.mergeTrue(c1);
      c1 = c2;
   }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
     return c2;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u95ab\u660f\u7deb\u6d93\ufffd
ConditionValue AndBooleanExpression():
{/*@bgen(jjtree) AndBooleanExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTANDBOOLEANEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue c1;
  ConditionValue c2;
}
{/*@bgen(jjtree) AndBooleanExpression */
  try {
/*@egen*/
  c1 = NoBooleanExpression()
  {
     c2 = c1;
  }
  (
  "&&"
  {
     c1.backpatchTrueChain(QTInfo.size + 1);
  }
  c2 = NoBooleanExpression()
    {
      c2.mergeFalse(c1);
      c1 = c2;
   }
  )*/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
     return c2;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u95ab\u660f\u7deb\u95c8\ufffd
ConditionValue  NoBooleanExpression():
{/*@bgen(jjtree) NoBooleanExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNOBOOLEANEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue c1;
  ConditionValue c2 = new ConditionValue();
  boolean flag = true;
}
{/*@bgen(jjtree) NoBooleanExpression */
  try {
/*@egen*/
  ("!"
  { flag = false; }
  )?
  c1 = BoolExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
     if (!flag){
      c2.trueChain = c1.falseChain;
      c2.falseChain = c1.trueChain;
      return c2;
    }
    return c1;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u9352\u3086\u67c7\u5bee\ufffd
ConditionValue  BoolExpression():
{/*@bgen(jjtree) BoolExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOLEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 String e1;
  String e2;
   String op;
  ConditionValue c = new ConditionValue();
}
{/*@bgen(jjtree) BoolExpression */
 try {
/*@egen*/
 e1 =  Expression()
    
(   (
     "<" { op = "<";}
  |  "<="{ op = "<";}
  |">"{ op = "<";}
  |">="{ op = "<";}
  | "=="{ op = "<";}
  | "!="{ op = "<";}
  ) 	
  
  e2 = Expression()
 {
      QTInfo info1 = new QTInfo("J" + op, e1, e2, "T");
      qtList.addQTInfo(info1);
      c.mergeTrue(info1);
      QTInfo info2 = new QTInfo("J", "_", "_", "F");
      qtList.addQTInfo(info2);
      c.mergeFalse(info2);
      return c;
    }
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
      QTInfo info1 = new QTInfo("Jnz", e1,"_", "T");
      qtList.addQTInfo(info1);
      c.mergeTrue(info1);
      QTInfo info2 = new QTInfo("J", "_", "_", "F");
      qtList.addQTInfo(info2);
      c.mergeFalse(info2);
      return c;
    }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
// while\u7487\ue15e\u5f5e
void whileStatement():
{/*@bgen(jjtree) whileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) whileStatement */
  try {
/*@egen*/
  WhileStatement1()|WhileStatement2()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//While
void WhileStatement1():
{/*@bgen(jjtree) WhileStatement1 */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue chain = null;
  int quad;
}
{/*@bgen(jjtree) WhileStatement1 */
 try {
/*@egen*/
 < WHILE >
 < SBRACL >
 {
    quad = QTInfo.size + 1;
  }
 chain = condition()
 {
   chain.backpatchTrueChain(QTInfo.size + 1);
  }
  < SBRACR >
   statement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    qtList.addQTInfo(new QTInfo("J", "_", "_", quad));
    chain.backpatchFalseChain(QTInfo.size + 1);
  }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
//do while
void WhileStatement2():
{/*@bgen(jjtree) WhileStatement2 */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue chain = null;
  int quad;
}
{/*@bgen(jjtree) WhileStatement2 */
  try {
/*@egen*/
  "do"  
 {
    quad = QTInfo.size + 1;
  }
   statement()
 < WHILE >
 < SBRACL >
 chain = condition()
 {
    chain.backpatchFalseChain(QTInfo.size + 1);
    chain.backpatchTrueChain(quad);
  }
  < SBRACR >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u741b\u3128\u63ea\u5bee\ufffd
String Expression() :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String exp;
}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  exp = AdditiveExpression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    return exp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
String AdditiveExpression() :
{/*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first;
  String middle;
  String newTemp;
  String op;
}
{/*@bgen(jjtree) AdditiveExpression */
   try {
/*@egen*/
   first = MultiplicativeExpression()
  {
    newTemp = first;
  }
  (
    (
	   "+" { op = "+";}
    | "-"{ op = "-";}
    )
   middle = MultiplicativeExpression()
    {
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op, first, middle, newTemp);
      qtList.addQTInfo(qt);
      first = newTemp;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return newTemp;
  }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

String MultiplicativeExpression() :
{/*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first;
  String middle;
  String newTemp;
  String op;
}
{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/
  first =  UnaryExpression()
   {
    newTemp = first;
   }
  (
    (
      "*"{op = "*";}
    | "/"{op = "/";}
    | "%"{op = "%";}
    )
    middle = UnaryExpression()
     {
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op, first, middle, newTemp);
      qtList.addQTInfo(qt);
      first = newTemp;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return newTemp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String UnaryExpression() :
{/*@bgen(jjtree) UnaryExpression */
        SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String str = null;
	Token t = null;
	Variable v = new Variable();
}
{/*@bgen(jjtree) UnaryExpression */
 try {
/*@egen*/
 (
    "(" str = Expression() ")"
    | str =  Identifier(v)
	{
  		v.image = str;
 	 	tables.con(v);
	}
	| str =  Integer(null)
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return str;
  }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

String Identifier(Variable v) :
{/*@bgen(jjtree) Identifier */
        SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Identifier */
 try {
/*@egen*/
 t=  < IDENTIFIER >/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {
   if(v!=null) { 
   	  v.line = t.beginLine;
   v.col = t.beginColumn; }
   return t.image;
 }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

String  Integer(Variable v) :
{/*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Integer */
 try {
/*@egen*/
 t = < INTEGER_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(v!=null) { 
       v.line = t.beginLine;
       v.col = t.beginColumn; }
    return t.image;
  }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}